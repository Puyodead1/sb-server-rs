//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "guilds")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub afk_channel_id: Option<String>,
    pub afk_timeout: Option<i32>,
    pub banner: Option<String>,
    pub default_message_notifications: Option<i32>,
    pub description: Option<String>,
    pub discovery_splash: Option<String>,
    pub explicit_content_filter: Option<i32>,
    pub features: String,
    pub primary_category_id: Option<String>,
    pub icon: Option<String>,
    pub large: bool,
    pub max_members: Option<i32>,
    pub max_presences: Option<i32>,
    pub max_video_channel_users: Option<i32>,
    pub member_count: Option<i32>,
    pub presence_count: Option<i32>,
    pub template_id: Option<String>,
    pub mfa_level: Option<i32>,
    pub name: String,
    pub owner_id: Option<String>,
    pub preferred_locale: Option<String>,
    pub premium_subscription_count: Option<i32>,
    pub premium_tier: i32,
    pub public_updates_channel_id: Option<String>,
    pub rules_channel_id: Option<String>,
    pub region: Option<String>,
    pub splash: Option<String>,
    pub system_channel_id: Option<String>,
    pub system_channel_flags: Option<i32>,
    pub unavailable: bool,
    pub verification_level: Option<i32>,
    pub welcome_screen: String,
    pub widget_channel_id: Option<String>,
    pub widget_enabled: bool,
    pub nsfw_level: Option<i32>,
    pub nsfw: bool,
    pub parent: Option<String>,
    pub premium_progress_bar_enabled: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bans::Entity")]
    Bans,
    #[sea_orm(
        belongs_to = "super::channels::Entity",
        from = "Column::WidgetChannelId",
        to = "super::channels::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channels5,
    #[sea_orm(
        belongs_to = "super::channels::Entity",
        from = "Column::SystemChannelId",
        to = "super::channels::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channels4,
    #[sea_orm(
        belongs_to = "super::channels::Entity",
        from = "Column::RulesChannelId",
        to = "super::channels::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channels3,
    #[sea_orm(
        belongs_to = "super::channels::Entity",
        from = "Column::PublicUpdatesChannelId",
        to = "super::channels::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channels2,
    #[sea_orm(
        belongs_to = "super::channels::Entity",
        from = "Column::AfkChannelId",
        to = "super::channels::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channels1,
    #[sea_orm(has_many = "super::emojis::Entity")]
    Emojis,
    #[sea_orm(has_many = "super::invites::Entity")]
    Invites,
    #[sea_orm(has_many = "super::members::Entity")]
    Members,
    #[sea_orm(has_many = "super::messages::Entity")]
    Messages,
    #[sea_orm(has_many = "super::roles::Entity")]
    Roles,
    #[sea_orm(has_many = "super::stickers::Entity")]
    Stickers,
    #[sea_orm(
        belongs_to = "super::templates::Entity",
        from = "Column::TemplateId",
        to = "super::templates::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Templates,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::OwnerId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
    #[sea_orm(has_many = "super::voice_states::Entity")]
    VoiceStates,
}

impl Related<super::bans::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bans.def()
    }
}

impl Related<super::emojis::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Emojis.def()
    }
}

impl Related<super::invites::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Invites.def()
    }
}

impl Related<super::members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Members.def()
    }
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Messages.def()
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Roles.def()
    }
}

impl Related<super::stickers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stickers.def()
    }
}

impl Related<super::templates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Templates.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::voice_states::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VoiceStates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
