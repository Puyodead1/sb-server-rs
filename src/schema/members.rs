//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "members")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub index: i32,
    pub id: String,
    pub guild_id: String,
    pub nick: Option<String>,
    pub joined_at: DateTime,
    pub premium_since: Option<i64>,
    pub deaf: bool,
    pub mute: bool,
    pub pending: bool,
    pub settings: String,
    pub last_message_id: Option<String>,
    pub joined_by: Option<String>,
    pub avatar: Option<String>,
    pub banner: Option<String>,
    pub bio: String,
    pub theme_colors: Option<String>,
    pub pronouns: Option<String>,
    pub communication_disabled_until: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::guilds::Entity",
        from = "Column::GuildId",
        to = "super::guilds::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Guilds,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::Id",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::guilds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guilds.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::member_roles::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::member_roles::Relation::Members.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
