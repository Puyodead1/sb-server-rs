//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "messages")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub channel_id: Option<String>,
    pub guild_id: Option<String>,
    pub author_id: Option<String>,
    pub member_id: Option<String>,
    pub webhook_id: Option<String>,
    pub application_id: Option<String>,
    pub content: Option<String>,
    pub timestamp: DateTime,
    pub edited_timestamp: Option<DateTime>,
    pub tts: Option<bool>,
    pub mention_everyone: Option<bool>,
    pub embeds: String,
    pub reactions: String,
    pub nonce: Option<String>,
    pub pinned: Option<bool>,
    pub r#type: i32,
    pub activity: Option<String>,
    pub flags: Option<String>,
    pub message_reference: Option<String>,
    pub interaction: Option<String>,
    pub components: Option<String>,
    pub message_reference_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::applications::Entity",
        from = "Column::ApplicationId",
        to = "super::applications::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Applications,
    #[sea_orm(has_many = "super::attachments::Entity")]
    Attachments,
    #[sea_orm(
        belongs_to = "super::channels::Entity",
        from = "Column::ChannelId",
        to = "super::channels::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Channels,
    #[sea_orm(
        belongs_to = "super::guilds::Entity",
        from = "Column::GuildId",
        to = "super::guilds::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Guilds,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::MessageReferenceId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::MemberId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users2,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AuthorId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users1,
    #[sea_orm(
        belongs_to = "super::webhooks::Entity",
        from = "Column::WebhookId",
        to = "super::webhooks::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Webhooks,
}

impl Related<super::applications::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Applications.def()
    }
}

impl Related<super::attachments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attachments.def()
    }
}

impl Related<super::guilds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guilds.def()
    }
}

impl Related<super::webhooks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Webhooks.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::message_user_mentions::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::message_user_mentions::Relation::Messages.def().rev())
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::message_role_mentions::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::message_role_mentions::Relation::Messages.def().rev())
    }
}

impl Related<super::channels::Entity> for Entity {
    fn to() -> RelationDef {
        super::message_channel_mentions::Relation::Channels.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::message_channel_mentions::Relation::Messages
                .def()
                .rev(),
        )
    }
}

impl Related<super::stickers::Entity> for Entity {
    fn to() -> RelationDef {
        super::message_stickers::Relation::Stickers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::message_stickers::Relation::Messages.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
