//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "stickers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub description: Option<String>,
    pub available: Option<bool>,
    pub tags: Option<String>,
    pub pack_id: Option<String>,
    pub guild_id: Option<String>,
    pub user_id: Option<String>,
    pub r#type: i32,
    pub format_type: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::guilds::Entity",
        from = "Column::GuildId",
        to = "super::guilds::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Guilds,
    #[sea_orm(
        belongs_to = "super::sticker_packs::Entity",
        from = "Column::PackId",
        to = "super::sticker_packs::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    StickerPacks,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::guilds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guilds.def()
    }
}

impl Related<super::sticker_packs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StickerPacks.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        super::message_stickers::Relation::Messages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::message_stickers::Relation::Stickers.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
