//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub username: String,
    pub discriminator: String,
    pub avatar: Option<String>,
    pub accent_color: Option<i32>,
    pub banner: Option<String>,
    pub theme_colors: Option<String>,
    pub pronouns: Option<String>,
    pub phone: Option<String>,
    pub desktop: bool,
    pub mobile: bool,
    pub premium: bool,
    pub premium_type: i32,
    pub bot: bool,
    pub bio: String,
    pub system: bool,
    pub nsfw_allowed: bool,
    pub mfa_enabled: bool,
    pub webauthn_enabled: bool,
    pub totp_secret: Option<String>,
    pub totp_last_ticket: Option<String>,
    pub created_at: DateTime,
    pub premium_since: Option<DateTime>,
    pub verified: bool,
    pub disabled: bool,
    pub deleted: bool,
    pub email: Option<String>,
    pub flags: String,
    pub public_flags: i32,
    pub purchased_flags: i32,
    pub premium_usage_flags: i32,
    pub rights: i64,
    pub data: String,
    pub fingerprints: String,
    pub extended_settings: String,
    #[sea_orm(column_name = "settingsIndex")]
    pub settings_index: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::backup_codes::Entity")]
    BackupCodes,
    #[sea_orm(has_many = "super::channels::Entity")]
    Channels,
    #[sea_orm(has_many = "super::connected_accounts::Entity")]
    ConnectedAccounts,
    #[sea_orm(has_many = "super::emojis::Entity")]
    Emojis,
    #[sea_orm(has_many = "super::guilds::Entity")]
    Guilds,
    #[sea_orm(has_many = "super::members::Entity")]
    Members,
    #[sea_orm(has_many = "super::read_states::Entity")]
    ReadStates,
    #[sea_orm(has_many = "super::recipients::Entity")]
    Recipients,
    #[sea_orm(has_many = "super::security_keys::Entity")]
    SecurityKeys,
    #[sea_orm(has_many = "super::sessions::Entity")]
    Sessions,
    #[sea_orm(has_many = "super::stickers::Entity")]
    Stickers,
    #[sea_orm(has_many = "super::team_members::Entity")]
    TeamMembers,
    #[sea_orm(has_many = "super::teams::Entity")]
    Teams,
    #[sea_orm(has_many = "super::templates::Entity")]
    Templates,
    #[sea_orm(
        belongs_to = "super::user_settings::Entity",
        from = "Column::SettingsIndex",
        to = "super::user_settings::Column::Index",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UserSettings,
    #[sea_orm(has_many = "super::voice_states::Entity")]
    VoiceStates,
    #[sea_orm(has_many = "super::webhooks::Entity")]
    Webhooks,
}

impl Related<super::backup_codes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BackupCodes.def()
    }
}

impl Related<super::channels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channels.def()
    }
}

impl Related<super::connected_accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ConnectedAccounts.def()
    }
}

impl Related<super::emojis::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Emojis.def()
    }
}

impl Related<super::guilds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guilds.def()
    }
}

impl Related<super::members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Members.def()
    }
}

impl Related<super::read_states::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReadStates.def()
    }
}

impl Related<super::recipients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipients.def()
    }
}

impl Related<super::security_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SecurityKeys.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl Related<super::stickers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stickers.def()
    }
}

impl Related<super::team_members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamMembers.def()
    }
}

impl Related<super::teams::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Teams.def()
    }
}

impl Related<super::templates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Templates.def()
    }
}

impl Related<super::user_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserSettings.def()
    }
}

impl Related<super::voice_states::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VoiceStates.def()
    }
}

impl Related<super::webhooks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Webhooks.def()
    }
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        super::message_user_mentions::Relation::Messages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::message_user_mentions::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
